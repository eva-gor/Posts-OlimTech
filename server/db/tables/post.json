[{"id":21,"title":"npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.\n\nWeb Socket is a socket for communication. There’s only send (no receive). \nTCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading.\nIn JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http.\n\nNo possibility to work with TCP on browser - only web socket (inner).\nnpm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.\n\nWeb Socket is a socket for communication. There’s only send (no receive). \nTCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading.\nIn JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http.\n\nNo possibility to work with TCP on browser - only web socket (inner).\nnpm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.\n\nWeb Socket is a socket for communication. There’s only send (no receive). \nTCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading.\nIn JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http.\n\nNo possibility to work with TCP on browser - only web socket (inner).\nnpm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.\n\nWeb Socket is a socket for communication. There’s only send (no receive). \nTCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading.\nIn JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http.\n\nNo possibility to work with TCP on browser - only web socket (inner).npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.npm i ws\nWebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him.\nJS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. \nBrowser can be only a WebSocket.\nWS client creates socket and WSS Server creates socket - and they start communicating one to one. \nWhen the connection comes server produces emit.\n","username":"charm_may","likes":[],"dislikes":[],"date":"1695103297862","comments":[]},{"id":22,"title":"my beautiful flowers","username":"charm_may","likes":[],"dislikes":[],"date":"1695103411601","imageSrc":"http://localhost:8080/22_1695474485561.webp"},{"id":23,"title":"sdf","username":"charm_may","likes":[],"dislikes":[],"date":"1695103704120","comments":[]},{"id":24,"title":"etr","username":"charm_may","likes":[],"dislikes":[],"date":"1695104203613","comments":[]},{"id":25,"title":"dfgdfg","username":"charm_may","likes":[],"dislikes":[],"date":"1695109131084","comments":[]},{"id":26,"title":"dfgdfg","username":"charm_may","likes":[],"dislikes":[],"date":"1695109215950","comments":[]},{"id":27,"title":"dsfsf","username":"charm_may","likes":[],"dislikes":[],"date":"1695109308813","comments":[]},{"id":28,"title":"dsfsf","username":"charm_may","likes":[],"dislikes":[],"date":"1695109399034","comments":[]},{"id":29,"title":"dgfd","username":"charm_may","likes":[],"dislikes":[],"date":"1695109491711","comments":[]},{"id":30,"title":"sd","username":"charm_may","likes":[],"dislikes":[],"date":"1695109754541","comments":[]},{"id":31,"title":"sf","username":"charm_may","likes":[],"dislikes":[],"date":"1695110024758","comments":[]},{"id":32,"title":"MY_NEW_POST","username":"charm_may","likes":[],"dislikes":[],"date":"1695110397748","comments":[]},{"id":33,"title":"MY_POST","username":"charm_may","likes":[],"dislikes":[],"date":"1695110483201","comments":[]},{"id":34,"title":"MY_POST","username":"charm_may","likes":[],"dislikes":[],"date":"1695110524642","comments":[]},{"id":35,"title":"post","username":"charm_may","likes":[],"dislikes":[],"date":"1695110591514","comments":[]},{"id":36,"title":"post","username":"charm_may","likes":[],"dislikes":[],"date":"1695110690774","imageSrc":"http://localhost:8080/36_1695110690892.png","comments":[]},{"id":37,"title":"N E W    P O S T","username":"MashaC","likes":[],"dislikes":[],"date":"1695370641573","comments":[]},{"id":38,"title":"sdf","username":"MashaC","likes":[],"dislikes":[],"date":"1695379969810","imageSrc":"http://localhost:8080/38_1695379989468.jpeg","comments":[]},{"id":39,"title":"My background","username":"MashaC","likes":[],"dislikes":[],"date":"1695382275993","comments":[]},{"id":40,"title":"My background","username":"MashaC","likes":[],"dislikes":[],"date":"1695382389973","imageSrc":"http://localhost:8080/40_1695382421674.jpeg","comments":[]},{"id":41,"title":"My flowers","username":"MashaC","likes":[],"dislikes":[],"date":"1695382528689","imageSrc":"http://localhost:8080/41_1695382541306.webp","comments":[]},{"id":42,"title":"Trulala","username":"MashaC","likes":[],"dislikes":[],"date":"1695388248022","imageSrc":"http://localhost:8080/42_1695388248102.jpeg","comments":[]},{"id":43,"title":"npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner).npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.","username":"charm_may","likes":["Eva"],"dislikes":[],"date":"1695409479711","imageSrc":"http://localhost:8080/43_1695409479804.webp","comments":[]},{"id":44,"title":"npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner). npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit. Web Socket is a socket for communication. There’s only send (no receive). TCP Server: there’s a accept method that blocks thread and wait for a connection. It’s on Java with multithreading. In JS - no blocking because o multithreading. Method accept here Is realized by .on(‘connection’). Request - is a http. No possibility to work with TCP on browser - only web socket (inner).npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.npm i ws WebSocket - 2-lines (duplex) for reading/writing connection. (Instead of Http: just response stream and connection is broken). In WebSocket connection is established all the time. JS supports only WebSocket (not WebSocket Server). To work with WS Server need to install WS. WSS - is a listener. WS - it’s a client. WSS can accept or decline messages from WS. We need to tie internal server to the external one. When we set new WSS we set new listener - when to this server comes quesry for connection, he produces EMIT to connection and gives the socket through that client can communicate to him. JS cannot work with TCP socket (but NodeJS can). For browser there’s internal socket. Browser can be only a WebSocket. WS client creates socket and WSS Server creates socket - and they start communicating one to one. When the connection comes server produces emit.","username":"charm_may","likes":["Eva"],"dislikes":[],"date":"1695409567949","imageSrc":"http://localhost:8080/44_1695409567959.webp","comments":[{"id":1,"text":"I think its good","postId":44,"username":"charm_may","likes":["tindirin"],"dislikes":["Eva"],"date":"1695412469402"},{"id":2,"text":"I feel good","postId":44,"username":"charm_may","likes":[],"dislikes":[],"date":"1695412513387"},{"id":3,"text":"I want pizza","postId":44,"username":"charm_may","likes":["Eva","MashaC"],"dislikes":[],"date":"1695412702414"},{"id":4,"text":"it's funny","postId":44,"username":"charm_may","likes":[],"dislikes":[],"date":"1695412772480"},{"id":5,"text":"New comment","postId":44,"username":"Eva","likes":[],"dislikes":["MashaC"],"date":"1695443492889"},{"id":6,"text":"this is a good time","postId":44,"username":"Eva","likes":["tindirin"],"dislikes":[],"date":"1695462766504"},{"id":8,"text":"111111111","postId":44,"username":"tindirin","likes":[],"dislikes":[],"date":"1695463330870"},{"id":9,"text":"super","postId":44,"username":"MashaC","likes":[],"dislikes":[],"date":"1695470644604"}]},{"id":45,"title":"cfgdhg\nvjh","username":"Eva","likes":[],"dislikes":[],"date":"1695458647068","imageSrc":"http://localhost:8080/45_1695458647170.webp","comments":[]}]